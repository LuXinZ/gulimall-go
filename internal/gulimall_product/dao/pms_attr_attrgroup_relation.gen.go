// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gulimall-product/internal/gulimall_product/model"
)

func newPmsAttrAttrgroupRelation(db *gorm.DB, opts ...gen.DOOption) pmsAttrAttrgroupRelation {
	_pmsAttrAttrgroupRelation := pmsAttrAttrgroupRelation{}

	_pmsAttrAttrgroupRelation.pmsAttrAttrgroupRelationDo.UseDB(db, opts...)
	_pmsAttrAttrgroupRelation.pmsAttrAttrgroupRelationDo.UseModel(&model.PmsAttrAttrgroupRelation{})

	tableName := _pmsAttrAttrgroupRelation.pmsAttrAttrgroupRelationDo.TableName()
	_pmsAttrAttrgroupRelation.ALL = field.NewAsterisk(tableName)
	_pmsAttrAttrgroupRelation.ID = field.NewInt64(tableName, "id")
	_pmsAttrAttrgroupRelation.AttrID = field.NewInt64(tableName, "attr_id")
	_pmsAttrAttrgroupRelation.AttrGroupID = field.NewInt64(tableName, "attr_group_id")
	_pmsAttrAttrgroupRelation.AttrSort = field.NewInt32(tableName, "attr_sort")

	_pmsAttrAttrgroupRelation.fillFieldMap()

	return _pmsAttrAttrgroupRelation
}

type pmsAttrAttrgroupRelation struct {
	pmsAttrAttrgroupRelationDo

	ALL         field.Asterisk
	ID          field.Int64 // id
	AttrID      field.Int64 // 属性id
	AttrGroupID field.Int64 // 属性分组id
	AttrSort    field.Int32 // 属性组内排序

	fieldMap map[string]field.Expr
}

func (p pmsAttrAttrgroupRelation) Table(newTableName string) *pmsAttrAttrgroupRelation {
	p.pmsAttrAttrgroupRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsAttrAttrgroupRelation) As(alias string) *pmsAttrAttrgroupRelation {
	p.pmsAttrAttrgroupRelationDo.DO = *(p.pmsAttrAttrgroupRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsAttrAttrgroupRelation) updateTableName(table string) *pmsAttrAttrgroupRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.AttrID = field.NewInt64(table, "attr_id")
	p.AttrGroupID = field.NewInt64(table, "attr_group_id")
	p.AttrSort = field.NewInt32(table, "attr_sort")

	p.fillFieldMap()

	return p
}

func (p *pmsAttrAttrgroupRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsAttrAttrgroupRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["attr_id"] = p.AttrID
	p.fieldMap["attr_group_id"] = p.AttrGroupID
	p.fieldMap["attr_sort"] = p.AttrSort
}

func (p pmsAttrAttrgroupRelation) clone(db *gorm.DB) pmsAttrAttrgroupRelation {
	p.pmsAttrAttrgroupRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsAttrAttrgroupRelation) replaceDB(db *gorm.DB) pmsAttrAttrgroupRelation {
	p.pmsAttrAttrgroupRelationDo.ReplaceDB(db)
	return p
}

type pmsAttrAttrgroupRelationDo struct{ gen.DO }

func (p pmsAttrAttrgroupRelationDo) Debug() *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsAttrAttrgroupRelationDo) WithContext(ctx context.Context) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsAttrAttrgroupRelationDo) ReadDB() *pmsAttrAttrgroupRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsAttrAttrgroupRelationDo) WriteDB() *pmsAttrAttrgroupRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsAttrAttrgroupRelationDo) Session(config *gorm.Session) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsAttrAttrgroupRelationDo) Clauses(conds ...clause.Expression) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsAttrAttrgroupRelationDo) Returning(value interface{}, columns ...string) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsAttrAttrgroupRelationDo) Not(conds ...gen.Condition) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsAttrAttrgroupRelationDo) Or(conds ...gen.Condition) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsAttrAttrgroupRelationDo) Select(conds ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsAttrAttrgroupRelationDo) Where(conds ...gen.Condition) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsAttrAttrgroupRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsAttrAttrgroupRelationDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsAttrAttrgroupRelationDo) Order(conds ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsAttrAttrgroupRelationDo) Distinct(cols ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsAttrAttrgroupRelationDo) Omit(cols ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsAttrAttrgroupRelationDo) Join(table schema.Tabler, on ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsAttrAttrgroupRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsAttrAttrgroupRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsAttrAttrgroupRelationDo) Group(cols ...field.Expr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsAttrAttrgroupRelationDo) Having(conds ...gen.Condition) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsAttrAttrgroupRelationDo) Limit(limit int) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsAttrAttrgroupRelationDo) Offset(offset int) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsAttrAttrgroupRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsAttrAttrgroupRelationDo) Unscoped() *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsAttrAttrgroupRelationDo) Create(values ...*model.PmsAttrAttrgroupRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsAttrAttrgroupRelationDo) CreateInBatches(values []*model.PmsAttrAttrgroupRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsAttrAttrgroupRelationDo) Save(values ...*model.PmsAttrAttrgroupRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsAttrAttrgroupRelationDo) First() (*model.PmsAttrAttrgroupRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrAttrgroupRelation), nil
	}
}

func (p pmsAttrAttrgroupRelationDo) Take() (*model.PmsAttrAttrgroupRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrAttrgroupRelation), nil
	}
}

func (p pmsAttrAttrgroupRelationDo) Last() (*model.PmsAttrAttrgroupRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrAttrgroupRelation), nil
	}
}

func (p pmsAttrAttrgroupRelationDo) Find() ([]*model.PmsAttrAttrgroupRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsAttrAttrgroupRelation), err
}

func (p pmsAttrAttrgroupRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttrAttrgroupRelation, err error) {
	buf := make([]*model.PmsAttrAttrgroupRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsAttrAttrgroupRelationDo) FindInBatches(result *[]*model.PmsAttrAttrgroupRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsAttrAttrgroupRelationDo) Attrs(attrs ...field.AssignExpr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsAttrAttrgroupRelationDo) Assign(attrs ...field.AssignExpr) *pmsAttrAttrgroupRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsAttrAttrgroupRelationDo) Joins(fields ...field.RelationField) *pmsAttrAttrgroupRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsAttrAttrgroupRelationDo) Preload(fields ...field.RelationField) *pmsAttrAttrgroupRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsAttrAttrgroupRelationDo) FirstOrInit() (*model.PmsAttrAttrgroupRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrAttrgroupRelation), nil
	}
}

func (p pmsAttrAttrgroupRelationDo) FirstOrCreate() (*model.PmsAttrAttrgroupRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrAttrgroupRelation), nil
	}
}

func (p pmsAttrAttrgroupRelationDo) FindByPage(offset int, limit int) (result []*model.PmsAttrAttrgroupRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsAttrAttrgroupRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsAttrAttrgroupRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsAttrAttrgroupRelationDo) Delete(models ...*model.PmsAttrAttrgroupRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsAttrAttrgroupRelationDo) withDO(do gen.Dao) *pmsAttrAttrgroupRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
