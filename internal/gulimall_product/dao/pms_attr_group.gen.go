// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gulimall-product/internal/gulimall_product/model"
)

func newPmsAttrGroup(db *gorm.DB, opts ...gen.DOOption) pmsAttrGroup {
	_pmsAttrGroup := pmsAttrGroup{}

	_pmsAttrGroup.pmsAttrGroupDo.UseDB(db, opts...)
	_pmsAttrGroup.pmsAttrGroupDo.UseModel(&model.PmsAttrGroup{})

	tableName := _pmsAttrGroup.pmsAttrGroupDo.TableName()
	_pmsAttrGroup.ALL = field.NewAsterisk(tableName)
	_pmsAttrGroup.AttrGroupID = field.NewInt64(tableName, "attr_group_id")
	_pmsAttrGroup.AttrGroupName = field.NewString(tableName, "attr_group_name")
	_pmsAttrGroup.Sort = field.NewInt32(tableName, "sort")
	_pmsAttrGroup.Descript = field.NewString(tableName, "descript")
	_pmsAttrGroup.Icon = field.NewString(tableName, "icon")
	_pmsAttrGroup.CatelogID = field.NewInt64(tableName, "catelog_id")

	_pmsAttrGroup.fillFieldMap()

	return _pmsAttrGroup
}

type pmsAttrGroup struct {
	pmsAttrGroupDo

	ALL           field.Asterisk
	AttrGroupID   field.Int64  // 分组id
	AttrGroupName field.String // 组名
	Sort          field.Int32  // 排序
	Descript      field.String // 描述
	Icon          field.String // 组图标
	CatelogID     field.Int64  // 所属分类id

	fieldMap map[string]field.Expr
}

func (p pmsAttrGroup) Table(newTableName string) *pmsAttrGroup {
	p.pmsAttrGroupDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsAttrGroup) As(alias string) *pmsAttrGroup {
	p.pmsAttrGroupDo.DO = *(p.pmsAttrGroupDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsAttrGroup) updateTableName(table string) *pmsAttrGroup {
	p.ALL = field.NewAsterisk(table)
	p.AttrGroupID = field.NewInt64(table, "attr_group_id")
	p.AttrGroupName = field.NewString(table, "attr_group_name")
	p.Sort = field.NewInt32(table, "sort")
	p.Descript = field.NewString(table, "descript")
	p.Icon = field.NewString(table, "icon")
	p.CatelogID = field.NewInt64(table, "catelog_id")

	p.fillFieldMap()

	return p
}

func (p *pmsAttrGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsAttrGroup) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["attr_group_id"] = p.AttrGroupID
	p.fieldMap["attr_group_name"] = p.AttrGroupName
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["descript"] = p.Descript
	p.fieldMap["icon"] = p.Icon
	p.fieldMap["catelog_id"] = p.CatelogID
}

func (p pmsAttrGroup) clone(db *gorm.DB) pmsAttrGroup {
	p.pmsAttrGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsAttrGroup) replaceDB(db *gorm.DB) pmsAttrGroup {
	p.pmsAttrGroupDo.ReplaceDB(db)
	return p
}

type pmsAttrGroupDo struct{ gen.DO }

func (p pmsAttrGroupDo) Debug() *pmsAttrGroupDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsAttrGroupDo) WithContext(ctx context.Context) *pmsAttrGroupDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsAttrGroupDo) ReadDB() *pmsAttrGroupDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsAttrGroupDo) WriteDB() *pmsAttrGroupDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsAttrGroupDo) Session(config *gorm.Session) *pmsAttrGroupDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsAttrGroupDo) Clauses(conds ...clause.Expression) *pmsAttrGroupDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsAttrGroupDo) Returning(value interface{}, columns ...string) *pmsAttrGroupDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsAttrGroupDo) Not(conds ...gen.Condition) *pmsAttrGroupDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsAttrGroupDo) Or(conds ...gen.Condition) *pmsAttrGroupDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsAttrGroupDo) Select(conds ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsAttrGroupDo) Where(conds ...gen.Condition) *pmsAttrGroupDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsAttrGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsAttrGroupDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsAttrGroupDo) Order(conds ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsAttrGroupDo) Distinct(cols ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsAttrGroupDo) Omit(cols ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsAttrGroupDo) Join(table schema.Tabler, on ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsAttrGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsAttrGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsAttrGroupDo) Group(cols ...field.Expr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsAttrGroupDo) Having(conds ...gen.Condition) *pmsAttrGroupDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsAttrGroupDo) Limit(limit int) *pmsAttrGroupDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsAttrGroupDo) Offset(offset int) *pmsAttrGroupDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsAttrGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsAttrGroupDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsAttrGroupDo) Unscoped() *pmsAttrGroupDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsAttrGroupDo) Create(values ...*model.PmsAttrGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsAttrGroupDo) CreateInBatches(values []*model.PmsAttrGroup, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsAttrGroupDo) Save(values ...*model.PmsAttrGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsAttrGroupDo) First() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) Take() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) Last() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) Find() ([]*model.PmsAttrGroup, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsAttrGroup), err
}

func (p pmsAttrGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsAttrGroup, err error) {
	buf := make([]*model.PmsAttrGroup, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsAttrGroupDo) FindInBatches(result *[]*model.PmsAttrGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsAttrGroupDo) Attrs(attrs ...field.AssignExpr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsAttrGroupDo) Assign(attrs ...field.AssignExpr) *pmsAttrGroupDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsAttrGroupDo) Joins(fields ...field.RelationField) *pmsAttrGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsAttrGroupDo) Preload(fields ...field.RelationField) *pmsAttrGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsAttrGroupDo) FirstOrInit() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) FirstOrCreate() (*model.PmsAttrGroup, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsAttrGroup), nil
	}
}

func (p pmsAttrGroupDo) FindByPage(offset int, limit int) (result []*model.PmsAttrGroup, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsAttrGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsAttrGroupDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsAttrGroupDo) Delete(models ...*model.PmsAttrGroup) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsAttrGroupDo) withDO(do gen.Dao) *pmsAttrGroupDo {
	p.DO = *do.(*gen.DO)
	return p
}
