// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gulimall-product/internal/gulimall_product/model"
)

func newPmsSpuComment(db *gorm.DB, opts ...gen.DOOption) pmsSpuComment {
	_pmsSpuComment := pmsSpuComment{}

	_pmsSpuComment.pmsSpuCommentDo.UseDB(db, opts...)
	_pmsSpuComment.pmsSpuCommentDo.UseModel(&model.PmsSpuComment{})

	tableName := _pmsSpuComment.pmsSpuCommentDo.TableName()
	_pmsSpuComment.ALL = field.NewAsterisk(tableName)
	_pmsSpuComment.ID = field.NewInt64(tableName, "id")
	_pmsSpuComment.SkuID = field.NewInt64(tableName, "sku_id")
	_pmsSpuComment.SpuID = field.NewInt64(tableName, "spu_id")
	_pmsSpuComment.SpuName = field.NewString(tableName, "spu_name")
	_pmsSpuComment.MemberNickName = field.NewString(tableName, "member_nick_name")
	_pmsSpuComment.Star = field.NewBool(tableName, "star")
	_pmsSpuComment.MemberIP = field.NewString(tableName, "member_ip")
	_pmsSpuComment.CreateTime = field.NewTime(tableName, "create_time")
	_pmsSpuComment.ShowStatus = field.NewBool(tableName, "show_status")
	_pmsSpuComment.SpuAttributes = field.NewString(tableName, "spu_attributes")
	_pmsSpuComment.LikesCount = field.NewInt32(tableName, "likes_count")
	_pmsSpuComment.ReplyCount = field.NewInt32(tableName, "reply_count")
	_pmsSpuComment.Resources = field.NewString(tableName, "resources")
	_pmsSpuComment.Content = field.NewString(tableName, "content")
	_pmsSpuComment.MemberIcon = field.NewString(tableName, "member_icon")
	_pmsSpuComment.CommentType = field.NewInt32(tableName, "comment_type")

	_pmsSpuComment.fillFieldMap()

	return _pmsSpuComment
}

type pmsSpuComment struct {
	pmsSpuCommentDo

	ALL            field.Asterisk
	ID             field.Int64  // id
	SkuID          field.Int64  // sku_id
	SpuID          field.Int64  // spu_id
	SpuName        field.String // 商品名字
	MemberNickName field.String // 会员昵称
	Star           field.Bool   // 星级
	MemberIP       field.String // 会员ip
	CreateTime     field.Time   // 创建时间
	ShowStatus     field.Bool   // 显示状态[0-不显示，1-显示]
	SpuAttributes  field.String // 购买时属性组合
	LikesCount     field.Int32  // 点赞数
	ReplyCount     field.Int32  // 回复数
	Resources      field.String // 评论图片/视频[json数据；[{type:文件类型,url:资源路径}]]
	Content        field.String // 内容
	MemberIcon     field.String // 用户头像
	CommentType    field.Int32  // 评论类型[0 - 对商品的直接评论，1 - 对评论的回复]

	fieldMap map[string]field.Expr
}

func (p pmsSpuComment) Table(newTableName string) *pmsSpuComment {
	p.pmsSpuCommentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSpuComment) As(alias string) *pmsSpuComment {
	p.pmsSpuCommentDo.DO = *(p.pmsSpuCommentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSpuComment) updateTableName(table string) *pmsSpuComment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SkuID = field.NewInt64(table, "sku_id")
	p.SpuID = field.NewInt64(table, "spu_id")
	p.SpuName = field.NewString(table, "spu_name")
	p.MemberNickName = field.NewString(table, "member_nick_name")
	p.Star = field.NewBool(table, "star")
	p.MemberIP = field.NewString(table, "member_ip")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ShowStatus = field.NewBool(table, "show_status")
	p.SpuAttributes = field.NewString(table, "spu_attributes")
	p.LikesCount = field.NewInt32(table, "likes_count")
	p.ReplyCount = field.NewInt32(table, "reply_count")
	p.Resources = field.NewString(table, "resources")
	p.Content = field.NewString(table, "content")
	p.MemberIcon = field.NewString(table, "member_icon")
	p.CommentType = field.NewInt32(table, "comment_type")

	p.fillFieldMap()

	return p
}

func (p *pmsSpuComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSpuComment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["id"] = p.ID
	p.fieldMap["sku_id"] = p.SkuID
	p.fieldMap["spu_id"] = p.SpuID
	p.fieldMap["spu_name"] = p.SpuName
	p.fieldMap["member_nick_name"] = p.MemberNickName
	p.fieldMap["star"] = p.Star
	p.fieldMap["member_ip"] = p.MemberIP
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["show_status"] = p.ShowStatus
	p.fieldMap["spu_attributes"] = p.SpuAttributes
	p.fieldMap["likes_count"] = p.LikesCount
	p.fieldMap["reply_count"] = p.ReplyCount
	p.fieldMap["resources"] = p.Resources
	p.fieldMap["content"] = p.Content
	p.fieldMap["member_icon"] = p.MemberIcon
	p.fieldMap["comment_type"] = p.CommentType
}

func (p pmsSpuComment) clone(db *gorm.DB) pmsSpuComment {
	p.pmsSpuCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSpuComment) replaceDB(db *gorm.DB) pmsSpuComment {
	p.pmsSpuCommentDo.ReplaceDB(db)
	return p
}

type pmsSpuCommentDo struct{ gen.DO }

func (p pmsSpuCommentDo) Debug() *pmsSpuCommentDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSpuCommentDo) WithContext(ctx context.Context) *pmsSpuCommentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSpuCommentDo) ReadDB() *pmsSpuCommentDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSpuCommentDo) WriteDB() *pmsSpuCommentDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSpuCommentDo) Session(config *gorm.Session) *pmsSpuCommentDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSpuCommentDo) Clauses(conds ...clause.Expression) *pmsSpuCommentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSpuCommentDo) Returning(value interface{}, columns ...string) *pmsSpuCommentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSpuCommentDo) Not(conds ...gen.Condition) *pmsSpuCommentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSpuCommentDo) Or(conds ...gen.Condition) *pmsSpuCommentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSpuCommentDo) Select(conds ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSpuCommentDo) Where(conds ...gen.Condition) *pmsSpuCommentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSpuCommentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsSpuCommentDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsSpuCommentDo) Order(conds ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSpuCommentDo) Distinct(cols ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSpuCommentDo) Omit(cols ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSpuCommentDo) Join(table schema.Tabler, on ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSpuCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSpuCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSpuCommentDo) Group(cols ...field.Expr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSpuCommentDo) Having(conds ...gen.Condition) *pmsSpuCommentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSpuCommentDo) Limit(limit int) *pmsSpuCommentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSpuCommentDo) Offset(offset int) *pmsSpuCommentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSpuCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsSpuCommentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSpuCommentDo) Unscoped() *pmsSpuCommentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSpuCommentDo) Create(values ...*model.PmsSpuComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSpuCommentDo) CreateInBatches(values []*model.PmsSpuComment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSpuCommentDo) Save(values ...*model.PmsSpuComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSpuCommentDo) First() (*model.PmsSpuComment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) Take() (*model.PmsSpuComment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) Last() (*model.PmsSpuComment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) Find() ([]*model.PmsSpuComment, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSpuComment), err
}

func (p pmsSpuCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuComment, err error) {
	buf := make([]*model.PmsSpuComment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSpuCommentDo) FindInBatches(result *[]*model.PmsSpuComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSpuCommentDo) Attrs(attrs ...field.AssignExpr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSpuCommentDo) Assign(attrs ...field.AssignExpr) *pmsSpuCommentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSpuCommentDo) Joins(fields ...field.RelationField) *pmsSpuCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSpuCommentDo) Preload(fields ...field.RelationField) *pmsSpuCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSpuCommentDo) FirstOrInit() (*model.PmsSpuComment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) FirstOrCreate() (*model.PmsSpuComment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuComment), nil
	}
}

func (p pmsSpuCommentDo) FindByPage(offset int, limit int) (result []*model.PmsSpuComment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSpuCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSpuCommentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSpuCommentDo) Delete(models ...*model.PmsSpuComment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSpuCommentDo) withDO(do gen.Dao) *pmsSpuCommentDo {
	p.DO = *do.(*gen.DO)
	return p
}
