// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gulimall-product/internal/gulimall_product/model"
)

func newPmsSpuInfo(db *gorm.DB, opts ...gen.DOOption) pmsSpuInfo {
	_pmsSpuInfo := pmsSpuInfo{}

	_pmsSpuInfo.pmsSpuInfoDo.UseDB(db, opts...)
	_pmsSpuInfo.pmsSpuInfoDo.UseModel(&model.PmsSpuInfo{})

	tableName := _pmsSpuInfo.pmsSpuInfoDo.TableName()
	_pmsSpuInfo.ALL = field.NewAsterisk(tableName)
	_pmsSpuInfo.ID = field.NewInt64(tableName, "id")
	_pmsSpuInfo.SpuName = field.NewString(tableName, "spu_name")
	_pmsSpuInfo.SpuDescription = field.NewString(tableName, "spu_description")
	_pmsSpuInfo.CatalogID = field.NewInt64(tableName, "catalog_id")
	_pmsSpuInfo.BrandID = field.NewInt64(tableName, "brand_id")
	_pmsSpuInfo.Weight = field.NewFloat64(tableName, "weight")
	_pmsSpuInfo.PublishStatus = field.NewInt32(tableName, "publish_status")
	_pmsSpuInfo.CreateTime = field.NewTime(tableName, "create_time")
	_pmsSpuInfo.UpdateTime = field.NewTime(tableName, "update_time")

	_pmsSpuInfo.fillFieldMap()

	return _pmsSpuInfo
}

type pmsSpuInfo struct {
	pmsSpuInfoDo

	ALL            field.Asterisk
	ID             field.Int64  // 商品id
	SpuName        field.String // 商品名称
	SpuDescription field.String // 商品描述
	CatalogID      field.Int64  // 所属分类id
	BrandID        field.Int64  // 品牌id
	Weight         field.Float64
	PublishStatus  field.Int32 // 上架状态[0 - 下架，1 - 上架]
	CreateTime     field.Time
	UpdateTime     field.Time

	fieldMap map[string]field.Expr
}

func (p pmsSpuInfo) Table(newTableName string) *pmsSpuInfo {
	p.pmsSpuInfoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSpuInfo) As(alias string) *pmsSpuInfo {
	p.pmsSpuInfoDo.DO = *(p.pmsSpuInfoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSpuInfo) updateTableName(table string) *pmsSpuInfo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpuName = field.NewString(table, "spu_name")
	p.SpuDescription = field.NewString(table, "spu_description")
	p.CatalogID = field.NewInt64(table, "catalog_id")
	p.BrandID = field.NewInt64(table, "brand_id")
	p.Weight = field.NewFloat64(table, "weight")
	p.PublishStatus = field.NewInt32(table, "publish_status")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateTime = field.NewTime(table, "update_time")

	p.fillFieldMap()

	return p
}

func (p *pmsSpuInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSpuInfo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["spu_name"] = p.SpuName
	p.fieldMap["spu_description"] = p.SpuDescription
	p.fieldMap["catalog_id"] = p.CatalogID
	p.fieldMap["brand_id"] = p.BrandID
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["publish_status"] = p.PublishStatus
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_time"] = p.UpdateTime
}

func (p pmsSpuInfo) clone(db *gorm.DB) pmsSpuInfo {
	p.pmsSpuInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSpuInfo) replaceDB(db *gorm.DB) pmsSpuInfo {
	p.pmsSpuInfoDo.ReplaceDB(db)
	return p
}

type pmsSpuInfoDo struct{ gen.DO }

func (p pmsSpuInfoDo) Debug() *pmsSpuInfoDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSpuInfoDo) WithContext(ctx context.Context) *pmsSpuInfoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSpuInfoDo) ReadDB() *pmsSpuInfoDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSpuInfoDo) WriteDB() *pmsSpuInfoDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSpuInfoDo) Session(config *gorm.Session) *pmsSpuInfoDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSpuInfoDo) Clauses(conds ...clause.Expression) *pmsSpuInfoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSpuInfoDo) Returning(value interface{}, columns ...string) *pmsSpuInfoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSpuInfoDo) Not(conds ...gen.Condition) *pmsSpuInfoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSpuInfoDo) Or(conds ...gen.Condition) *pmsSpuInfoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSpuInfoDo) Select(conds ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSpuInfoDo) Where(conds ...gen.Condition) *pmsSpuInfoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSpuInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsSpuInfoDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsSpuInfoDo) Order(conds ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSpuInfoDo) Distinct(cols ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSpuInfoDo) Omit(cols ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSpuInfoDo) Join(table schema.Tabler, on ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSpuInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSpuInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSpuInfoDo) Group(cols ...field.Expr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSpuInfoDo) Having(conds ...gen.Condition) *pmsSpuInfoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSpuInfoDo) Limit(limit int) *pmsSpuInfoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSpuInfoDo) Offset(offset int) *pmsSpuInfoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSpuInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsSpuInfoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSpuInfoDo) Unscoped() *pmsSpuInfoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSpuInfoDo) Create(values ...*model.PmsSpuInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSpuInfoDo) CreateInBatches(values []*model.PmsSpuInfo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSpuInfoDo) Save(values ...*model.PmsSpuInfo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSpuInfoDo) First() (*model.PmsSpuInfo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuInfo), nil
	}
}

func (p pmsSpuInfoDo) Take() (*model.PmsSpuInfo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuInfo), nil
	}
}

func (p pmsSpuInfoDo) Last() (*model.PmsSpuInfo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuInfo), nil
	}
}

func (p pmsSpuInfoDo) Find() ([]*model.PmsSpuInfo, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSpuInfo), err
}

func (p pmsSpuInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSpuInfo, err error) {
	buf := make([]*model.PmsSpuInfo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSpuInfoDo) FindInBatches(result *[]*model.PmsSpuInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSpuInfoDo) Attrs(attrs ...field.AssignExpr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSpuInfoDo) Assign(attrs ...field.AssignExpr) *pmsSpuInfoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSpuInfoDo) Joins(fields ...field.RelationField) *pmsSpuInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSpuInfoDo) Preload(fields ...field.RelationField) *pmsSpuInfoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSpuInfoDo) FirstOrInit() (*model.PmsSpuInfo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuInfo), nil
	}
}

func (p pmsSpuInfoDo) FirstOrCreate() (*model.PmsSpuInfo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSpuInfo), nil
	}
}

func (p pmsSpuInfoDo) FindByPage(offset int, limit int) (result []*model.PmsSpuInfo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSpuInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSpuInfoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSpuInfoDo) Delete(models ...*model.PmsSpuInfo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSpuInfoDo) withDO(do gen.Dao) *pmsSpuInfoDo {
	p.DO = *do.(*gen.DO)
	return p
}
