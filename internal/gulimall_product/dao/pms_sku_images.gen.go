// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gulimall-product/internal/gulimall_product/model"
)

func newPmsSkuImage(db *gorm.DB, opts ...gen.DOOption) pmsSkuImage {
	_pmsSkuImage := pmsSkuImage{}

	_pmsSkuImage.pmsSkuImageDo.UseDB(db, opts...)
	_pmsSkuImage.pmsSkuImageDo.UseModel(&model.PmsSkuImage{})

	tableName := _pmsSkuImage.pmsSkuImageDo.TableName()
	_pmsSkuImage.ALL = field.NewAsterisk(tableName)
	_pmsSkuImage.ID = field.NewInt64(tableName, "id")
	_pmsSkuImage.SkuID = field.NewInt64(tableName, "sku_id")
	_pmsSkuImage.ImgURL = field.NewString(tableName, "img_url")
	_pmsSkuImage.ImgSort = field.NewInt32(tableName, "img_sort")
	_pmsSkuImage.DefaultImg = field.NewInt32(tableName, "default_img")

	_pmsSkuImage.fillFieldMap()

	return _pmsSkuImage
}

type pmsSkuImage struct {
	pmsSkuImageDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	SkuID      field.Int64  // sku_id
	ImgURL     field.String // 图片地址
	ImgSort    field.Int32  // 排序
	DefaultImg field.Int32  // 默认图[0 - 不是默认图，1 - 是默认图]

	fieldMap map[string]field.Expr
}

func (p pmsSkuImage) Table(newTableName string) *pmsSkuImage {
	p.pmsSkuImageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsSkuImage) As(alias string) *pmsSkuImage {
	p.pmsSkuImageDo.DO = *(p.pmsSkuImageDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsSkuImage) updateTableName(table string) *pmsSkuImage {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SkuID = field.NewInt64(table, "sku_id")
	p.ImgURL = field.NewString(table, "img_url")
	p.ImgSort = field.NewInt32(table, "img_sort")
	p.DefaultImg = field.NewInt32(table, "default_img")

	p.fillFieldMap()

	return p
}

func (p *pmsSkuImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsSkuImage) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["sku_id"] = p.SkuID
	p.fieldMap["img_url"] = p.ImgURL
	p.fieldMap["img_sort"] = p.ImgSort
	p.fieldMap["default_img"] = p.DefaultImg
}

func (p pmsSkuImage) clone(db *gorm.DB) pmsSkuImage {
	p.pmsSkuImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsSkuImage) replaceDB(db *gorm.DB) pmsSkuImage {
	p.pmsSkuImageDo.ReplaceDB(db)
	return p
}

type pmsSkuImageDo struct{ gen.DO }

func (p pmsSkuImageDo) Debug() *pmsSkuImageDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsSkuImageDo) WithContext(ctx context.Context) *pmsSkuImageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsSkuImageDo) ReadDB() *pmsSkuImageDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsSkuImageDo) WriteDB() *pmsSkuImageDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsSkuImageDo) Session(config *gorm.Session) *pmsSkuImageDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsSkuImageDo) Clauses(conds ...clause.Expression) *pmsSkuImageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsSkuImageDo) Returning(value interface{}, columns ...string) *pmsSkuImageDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsSkuImageDo) Not(conds ...gen.Condition) *pmsSkuImageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsSkuImageDo) Or(conds ...gen.Condition) *pmsSkuImageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsSkuImageDo) Select(conds ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsSkuImageDo) Where(conds ...gen.Condition) *pmsSkuImageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsSkuImageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsSkuImageDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsSkuImageDo) Order(conds ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsSkuImageDo) Distinct(cols ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsSkuImageDo) Omit(cols ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsSkuImageDo) Join(table schema.Tabler, on ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsSkuImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsSkuImageDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsSkuImageDo) Group(cols ...field.Expr) *pmsSkuImageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsSkuImageDo) Having(conds ...gen.Condition) *pmsSkuImageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsSkuImageDo) Limit(limit int) *pmsSkuImageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsSkuImageDo) Offset(offset int) *pmsSkuImageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsSkuImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsSkuImageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsSkuImageDo) Unscoped() *pmsSkuImageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsSkuImageDo) Create(values ...*model.PmsSkuImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsSkuImageDo) CreateInBatches(values []*model.PmsSkuImage, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsSkuImageDo) Save(values ...*model.PmsSkuImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsSkuImageDo) First() (*model.PmsSkuImage, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) Take() (*model.PmsSkuImage, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) Last() (*model.PmsSkuImage, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) Find() ([]*model.PmsSkuImage, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsSkuImage), err
}

func (p pmsSkuImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsSkuImage, err error) {
	buf := make([]*model.PmsSkuImage, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsSkuImageDo) FindInBatches(result *[]*model.PmsSkuImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsSkuImageDo) Attrs(attrs ...field.AssignExpr) *pmsSkuImageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsSkuImageDo) Assign(attrs ...field.AssignExpr) *pmsSkuImageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsSkuImageDo) Joins(fields ...field.RelationField) *pmsSkuImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsSkuImageDo) Preload(fields ...field.RelationField) *pmsSkuImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsSkuImageDo) FirstOrInit() (*model.PmsSkuImage, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) FirstOrCreate() (*model.PmsSkuImage, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsSkuImage), nil
	}
}

func (p pmsSkuImageDo) FindByPage(offset int, limit int) (result []*model.PmsSkuImage, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsSkuImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsSkuImageDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsSkuImageDo) Delete(models ...*model.PmsSkuImage) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsSkuImageDo) withDO(do gen.Dao) *pmsSkuImageDo {
	p.DO = *do.(*gen.DO)
	return p
}
