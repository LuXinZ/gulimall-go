// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gulimall-product/internal/gulimall_product/model"
)

func newPmsCategoryBrandRelation(db *gorm.DB, opts ...gen.DOOption) pmsCategoryBrandRelation {
	_pmsCategoryBrandRelation := pmsCategoryBrandRelation{}

	_pmsCategoryBrandRelation.pmsCategoryBrandRelationDo.UseDB(db, opts...)
	_pmsCategoryBrandRelation.pmsCategoryBrandRelationDo.UseModel(&model.PmsCategoryBrandRelation{})

	tableName := _pmsCategoryBrandRelation.pmsCategoryBrandRelationDo.TableName()
	_pmsCategoryBrandRelation.ALL = field.NewAsterisk(tableName)
	_pmsCategoryBrandRelation.ID = field.NewInt64(tableName, "id")
	_pmsCategoryBrandRelation.BrandID = field.NewInt64(tableName, "brand_id")
	_pmsCategoryBrandRelation.CatelogID = field.NewInt64(tableName, "catelog_id")
	_pmsCategoryBrandRelation.BrandName = field.NewString(tableName, "brand_name")
	_pmsCategoryBrandRelation.CatelogName = field.NewString(tableName, "catelog_name")

	_pmsCategoryBrandRelation.fillFieldMap()

	return _pmsCategoryBrandRelation
}

type pmsCategoryBrandRelation struct {
	pmsCategoryBrandRelationDo

	ALL         field.Asterisk
	ID          field.Int64
	BrandID     field.Int64 // 品牌id
	CatelogID   field.Int64 // 分类id
	BrandName   field.String
	CatelogName field.String

	fieldMap map[string]field.Expr
}

func (p pmsCategoryBrandRelation) Table(newTableName string) *pmsCategoryBrandRelation {
	p.pmsCategoryBrandRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pmsCategoryBrandRelation) As(alias string) *pmsCategoryBrandRelation {
	p.pmsCategoryBrandRelationDo.DO = *(p.pmsCategoryBrandRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pmsCategoryBrandRelation) updateTableName(table string) *pmsCategoryBrandRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.BrandID = field.NewInt64(table, "brand_id")
	p.CatelogID = field.NewInt64(table, "catelog_id")
	p.BrandName = field.NewString(table, "brand_name")
	p.CatelogName = field.NewString(table, "catelog_name")

	p.fillFieldMap()

	return p
}

func (p *pmsCategoryBrandRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pmsCategoryBrandRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["brand_id"] = p.BrandID
	p.fieldMap["catelog_id"] = p.CatelogID
	p.fieldMap["brand_name"] = p.BrandName
	p.fieldMap["catelog_name"] = p.CatelogName
}

func (p pmsCategoryBrandRelation) clone(db *gorm.DB) pmsCategoryBrandRelation {
	p.pmsCategoryBrandRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pmsCategoryBrandRelation) replaceDB(db *gorm.DB) pmsCategoryBrandRelation {
	p.pmsCategoryBrandRelationDo.ReplaceDB(db)
	return p
}

type pmsCategoryBrandRelationDo struct{ gen.DO }

func (p pmsCategoryBrandRelationDo) Debug() *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p pmsCategoryBrandRelationDo) WithContext(ctx context.Context) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pmsCategoryBrandRelationDo) ReadDB() *pmsCategoryBrandRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p pmsCategoryBrandRelationDo) WriteDB() *pmsCategoryBrandRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p pmsCategoryBrandRelationDo) Session(config *gorm.Session) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p pmsCategoryBrandRelationDo) Clauses(conds ...clause.Expression) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pmsCategoryBrandRelationDo) Returning(value interface{}, columns ...string) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pmsCategoryBrandRelationDo) Not(conds ...gen.Condition) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pmsCategoryBrandRelationDo) Or(conds ...gen.Condition) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pmsCategoryBrandRelationDo) Select(conds ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pmsCategoryBrandRelationDo) Where(conds ...gen.Condition) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pmsCategoryBrandRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pmsCategoryBrandRelationDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pmsCategoryBrandRelationDo) Order(conds ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pmsCategoryBrandRelationDo) Distinct(cols ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pmsCategoryBrandRelationDo) Omit(cols ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pmsCategoryBrandRelationDo) Join(table schema.Tabler, on ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pmsCategoryBrandRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pmsCategoryBrandRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pmsCategoryBrandRelationDo) Group(cols ...field.Expr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pmsCategoryBrandRelationDo) Having(conds ...gen.Condition) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pmsCategoryBrandRelationDo) Limit(limit int) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pmsCategoryBrandRelationDo) Offset(offset int) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pmsCategoryBrandRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pmsCategoryBrandRelationDo) Unscoped() *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pmsCategoryBrandRelationDo) Create(values ...*model.PmsCategoryBrandRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pmsCategoryBrandRelationDo) CreateInBatches(values []*model.PmsCategoryBrandRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pmsCategoryBrandRelationDo) Save(values ...*model.PmsCategoryBrandRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pmsCategoryBrandRelationDo) First() (*model.PmsCategoryBrandRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryBrandRelation), nil
	}
}

func (p pmsCategoryBrandRelationDo) Take() (*model.PmsCategoryBrandRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryBrandRelation), nil
	}
}

func (p pmsCategoryBrandRelationDo) Last() (*model.PmsCategoryBrandRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryBrandRelation), nil
	}
}

func (p pmsCategoryBrandRelationDo) Find() ([]*model.PmsCategoryBrandRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.PmsCategoryBrandRelation), err
}

func (p pmsCategoryBrandRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PmsCategoryBrandRelation, err error) {
	buf := make([]*model.PmsCategoryBrandRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pmsCategoryBrandRelationDo) FindInBatches(result *[]*model.PmsCategoryBrandRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pmsCategoryBrandRelationDo) Attrs(attrs ...field.AssignExpr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pmsCategoryBrandRelationDo) Assign(attrs ...field.AssignExpr) *pmsCategoryBrandRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pmsCategoryBrandRelationDo) Joins(fields ...field.RelationField) *pmsCategoryBrandRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pmsCategoryBrandRelationDo) Preload(fields ...field.RelationField) *pmsCategoryBrandRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pmsCategoryBrandRelationDo) FirstOrInit() (*model.PmsCategoryBrandRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryBrandRelation), nil
	}
}

func (p pmsCategoryBrandRelationDo) FirstOrCreate() (*model.PmsCategoryBrandRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PmsCategoryBrandRelation), nil
	}
}

func (p pmsCategoryBrandRelationDo) FindByPage(offset int, limit int) (result []*model.PmsCategoryBrandRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pmsCategoryBrandRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pmsCategoryBrandRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pmsCategoryBrandRelationDo) Delete(models ...*model.PmsCategoryBrandRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pmsCategoryBrandRelationDo) withDO(do gen.Dao) *pmsCategoryBrandRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
